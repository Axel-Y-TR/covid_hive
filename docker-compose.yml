version: '3.8'

services:
  hbase:
    image: harisekhon/hbase
    hostname: hbase
    container_name: hbase
    ports:
      - "2181:2181"
      - "9090:9090"
      - "16000:16000"
      - "16010:16010"
      - "16020:16020"
      - "16030:16030"
    networks:
      my_network:
        ipv4_address: 172.20.0.2
    tty: true
    stdin_open: true


  etl:
    build:
      context: ./data
      dockerfile: dockerfile
    container_name: etl
    depends_on:
      - hbase
    networks:
      my_network:
        ipv4_address: 172.20.0.3
    ports:
      - "8182:8182"

  hive:
    build:
      context: ./
      dockerfile: dockerfile
    container_name: etl
    depends_on:
      - etl
    networks:
      my_network:
        ipv4_address: 172.20.0.6
    ports:
      - "8183:8183"

  hive4:
    image: apache/hive:4.0.0
    container_name: hive4
    environment:
      - SERVICE_NAME=hiveserver2
    ports:
      - "10000:10000"
      - "10002:10002"
    networks:
      my_network:
        ipv4_address: 172.20.0.4
    tty: true
    stdin_open: true


  # dashboard:
  #   build:
  #     context: ./dashboard
  #     dockerfile: dockerfile
  #   container_name: dashboard
  #   depends_on:
  #     - hbase
  #     - python_script
  #   networks:
  #     my_network:
  #       ipv4_address: 172.20.0.4
  #   ports:
  #     - "8500:8500"
  #   command: streamlit run dashboard.py --server.port 8500

  hue:
    image: gethue/hue
    container_name: hue
    ports:
      - "8888:8888" # Port web de Hue
    environment:
      - HUE_DATABASE_ENGINE=happybase
      - HUE_HBASE_HOST=hive
      - HUE_HBASE_PORT=9090
      - HUE_YARN_HOST=yarn  # Utilise le nom du service YARN
      - HUE_YARN_PORT=8088
    networks:
      my_network:
        ipv4_address: 172.20.0.5

volumes:
  hbase_data:

networks:
  my_network:
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
